# Running

To run the chat server, place ChatServer.jar into a directory on your computer, then navigate to that directory in a terminal, and run

    java -jar ChatServer.jar <port>

where <port> is the port number the server will listen on.


# Port numbers

If you're not sure what port number to use, a good rule of thumb is to use your UID on the lab computers.  You can find this by running

    id -u

in the terminal.  Since everyone has a diffent UID, it's likely that no one else will be running a server on this port.


# Connecting to the server

While the server is running, clients can connect to it by opening a socket to it.  To connect to a server running on your local computer, you can use the address "localhost" and the port number you chose when you started the server.

You can test the server using telnet.  While the server is running, open a second terminal window, and run

    telnet localhost <port>

specifying the appropriate port number.  This will open a connection, and you can then send plain text messages to the server by typing.  For instance, you can request the current time by typing TIME and hitting return.  You should see the response from the server.


# Example server

For experimental purposes, a chat server should be running at mct25.teaching.cs.st-andrews.ac.uk on port 21801.  This is one that everyone can connect to and experiment with together â€“ feel free to try it.  Note that it could go down at any time, and in any case you should make sure your code works by testing against a local server as well.


# Protocol

The chat server uses a simplified version of the IRC protocol.  It supports the following commands you will need to use to implement your chat client: NICK, QUIT, JOIN, PART, NAMES, LIST, and PRIVMSG.  It also supports the following three commands which you can use for testing: TIME, INFO, and PING.

You interact with the server by sending it a string which starts with one of these ten commands.  In some cases, the command should be followed by further arguments.

NICK <nickname>
attempts to register with the server as a chat user, with the given nickname

QUIT
terminates the connection to the server

JOIN <channel>
joins the channel with the given name, which must start with a hash symbol

PART <channel>
leaves the channel with the given name

NAMES <channel>
requests a list of all users in the given channel

LIST
requests a list of all channels that currently exist on the server

PRIVMSG <target> :<message>
sends a chat message to the given channel or directly to a user
- <target> should be the name of a channel or user
- <message> is the text of the message to be displayed

These messages should be all that is needed for a working chat client.  You may also wish to experiment with the TIME and INFO commands, which require no arguments; and the PING command, where the server will echo any string you send it.

Some of the commands above will be followed by a reply from the server.  If successful, the server will respond with a message starting REPLY_<commandname>, or if unsuccessful a message starting ERROR.  In either case, this may be followed by other relevant information.  Try experimenting to discover what format the server uses in its replies.
